#!/usr/bin/env node

'use strict';

var os = require('os');
var path = require('path');
var spawn = require('child_process').spawn;

var MOCHA_PATH = require.resolve('mocha/bin/mocha');
var TS_MOCHA_PATH = path.join(__dirname, "../src/index.js");
var mochaArgs = [MOCHA_PATH, "--require", TS_MOCHA_PATH];

process.argv.slice(2).forEach(function (arg, idx, arr) {
  switch (arg) {
    case "-p":
    case "--project":
      const projectArgValueIdx = idx + 1;
      const tsconfigPath = arr[projectArgValueIdx];
      // remove tsconfigPath param from array parsing
      arr.splice(projectArgValueIdx, 1);

      process.env.TS_NODE_PROJECT = tsconfigPath;
      break;

    case "--paths":
      process.env.TS_CONFIG_PATHS = true;
      break;

    case "--type-check":
      process.env.TS_TYPE_CHECK = true;
      break;

    case "--posix-exit-codes":
      process.env.POSIX_EXIT_CODES = true;
      mochaArgs.push(arg); // add when supported by mocha
      break;

    default:
      // pass unrecognized args to mocha
      mochaArgs.push(arg);
      break;
  }
});

var mocha = spawn(process.execPath, mochaArgs, {
  stdio: "inherit",
});
mocha.on('exit', function (code, signal) {
  console.warn(`ts-mocha saw mocha exit with code ${code} and signal ${signal}`);
  process.on('exit', function () {
    if (signal) {
      if(process.env.POSIX_EXIT_CODES == 'true') {
        console.warn(`ts-mocha exiting with code ${128 + os.constants.signals[signal]}`)
        process.exitCode = 128 +  os.constants.signals[signal];
        process.exit(process.exitCode);
      } else {
        console.warn(`ts-mocha killing process with ${signal}; process.exitCode ${process.exitCode}`);
        process.kill(process.pid, signal);
      }
    } else {
      process.exit(code);
    }
  });
});

process.on('SIGINT', function () {
  mocha.kill('SIGINT');
  mocha.kill('SIGTERM');
});
